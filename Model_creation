{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import Conv2D, MaxPooling2D, Flatten\n",
    "from keras.models import load_model\n",
    "from keras.callbacks import EarlyStopping\n",
    "from keras.layers import Dropout, BatchNormalization\n",
    "import matplotlib.pyplot as plt\n",
    "from keras.preprocessing.image import load_img, img_to_array\n",
    "from sklearn.model_selection import train_test_split\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "import seaborn as sns\n",
    "from imports_for_ML import load_images\n",
    "import keras\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "img_dir = \"C:\\\\Users\\\\48570\\\\Desktop\\\\Leon\\\\cats_vs_dogs\\\\train\\\\train\\\\\"\n",
    "images = os.listdir(img_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_images = [os.path.join(img_dir, img) for img in images]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n"
     ]
    }
   ],
   "source": [
    "from imports_for_ML import load_images\n",
    "\n",
    "X, y = load_images(img_dir, n_images=25000, resize=(64, 64))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.05, random_state=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(32, (3, 3), input_shape=(64, 64, 3), activation='relu', kernel_initializer='he_uniform'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.05))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.15))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.30))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_uniform'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(256, activation='relu', kernel_initializer='he_uniform'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "    \n",
    "model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 22800 samples, validate on 950 samples\n",
      "Epoch 1/35\n",
      "22800/22800 [==============================] - 193s 8ms/step - loss: 0.7041 - accuracy: 0.6496 - val_loss: 0.4925 - val_accuracy: 0.7568\n",
      "Epoch 2/35\n",
      "22800/22800 [==============================] - 192s 8ms/step - loss: 0.4978 - accuracy: 0.7660 - val_loss: 0.4507 - val_accuracy: 0.8074\n",
      "Epoch 3/35\n",
      "22800/22800 [==============================] - 192s 8ms/step - loss: 0.4269 - accuracy: 0.8096 - val_loss: 0.4220 - val_accuracy: 0.7916\n",
      "Epoch 4/35\n",
      "22800/22800 [==============================] - 192s 8ms/step - loss: 0.3843 - accuracy: 0.8341 - val_loss: 0.3798 - val_accuracy: 0.8179\n",
      "Epoch 5/35\n",
      "22800/22800 [==============================] - 192s 8ms/step - loss: 0.3590 - accuracy: 0.8503 - val_loss: 0.3131 - val_accuracy: 0.8537\n",
      "Epoch 6/35\n",
      "22800/22800 [==============================] - 192s 8ms/step - loss: 0.3417 - accuracy: 0.8582 - val_loss: 0.3746 - val_accuracy: 0.8632\n",
      "Epoch 7/35\n",
      "22800/22800 [==============================] - 192s 8ms/step - loss: 0.3248 - accuracy: 0.8639 - val_loss: 0.3460 - val_accuracy: 0.8579\n",
      "Epoch 8/35\n",
      "22800/22800 [==============================] - 192s 8ms/step - loss: 0.3129 - accuracy: 0.8722 - val_loss: 0.3714 - val_accuracy: 0.8147\n",
      "Epoch 9/35\n",
      "22800/22800 [==============================] - 191s 8ms/step - loss: 0.3052 - accuracy: 0.8749 - val_loss: 0.3591 - val_accuracy: 0.8547\n",
      "Epoch 10/35\n",
      "22800/22800 [==============================] - 193s 8ms/step - loss: 0.2960 - accuracy: 0.8793 - val_loss: 0.3795 - val_accuracy: 0.8147\n",
      "Epoch 11/35\n",
      "22800/22800 [==============================] - 192s 8ms/step - loss: 0.2929 - accuracy: 0.8837 - val_loss: 0.2911 - val_accuracy: 0.8726\n",
      "Epoch 12/35\n",
      "22800/22800 [==============================] - 193s 8ms/step - loss: 0.2739 - accuracy: 0.8911 - val_loss: 0.3992 - val_accuracy: 0.8379\n",
      "Epoch 13/35\n",
      "22800/22800 [==============================] - 193s 8ms/step - loss: 0.2691 - accuracy: 0.8915 - val_loss: 0.3174 - val_accuracy: 0.8716\n",
      "Epoch 14/35\n",
      "22800/22800 [==============================] - 192s 8ms/step - loss: 0.2560 - accuracy: 0.8972 - val_loss: 0.4197 - val_accuracy: 0.8211\n",
      "Epoch 15/35\n",
      "22800/22800 [==============================] - 193s 8ms/step - loss: 0.2599 - accuracy: 0.8980 - val_loss: 0.3038 - val_accuracy: 0.8800\n",
      "Epoch 16/35\n",
      "22800/22800 [==============================] - 192s 8ms/step - loss: 0.2476 - accuracy: 0.9022 - val_loss: 0.2866 - val_accuracy: 0.8811\n",
      "Epoch 17/35\n",
      "22800/22800 [==============================] - 192s 8ms/step - loss: 0.2412 - accuracy: 0.9056 - val_loss: 0.3153 - val_accuracy: 0.8800\n",
      "Epoch 18/35\n",
      "22800/22800 [==============================] - 193s 8ms/step - loss: 0.2367 - accuracy: 0.9063 - val_loss: 0.2843 - val_accuracy: 0.8800\n",
      "Epoch 19/35\n",
      "22800/22800 [==============================] - 206s 9ms/step - loss: 0.2328 - accuracy: 0.9114 - val_loss: 0.2683 - val_accuracy: 0.8937\n",
      "Epoch 20/35\n",
      "22800/22800 [==============================] - 204s 9ms/step - loss: 0.2285 - accuracy: 0.9118 - val_loss: 0.3069 - val_accuracy: 0.8600\n",
      "Epoch 21/35\n",
      "22800/22800 [==============================] - 204s 9ms/step - loss: 0.2199 - accuracy: 0.9178 - val_loss: 0.3375 - val_accuracy: 0.8579\n",
      "Epoch 22/35\n",
      "22800/22800 [==============================] - 209s 9ms/step - loss: 0.2244 - accuracy: 0.9155 - val_loss: 0.3121 - val_accuracy: 0.8716\n",
      "Epoch 23/35\n",
      "22800/22800 [==============================] - 213s 9ms/step - loss: 0.2215 - accuracy: 0.9138 - val_loss: 0.2832 - val_accuracy: 0.8863\n",
      "Epoch 24/35\n",
      "22800/22800 [==============================] - 216s 9ms/step - loss: 0.2128 - accuracy: 0.9182 - val_loss: 0.2793 - val_accuracy: 0.8768\n",
      "Epoch 25/35\n",
      "22800/22800 [==============================] - 214s 9ms/step - loss: 0.2109 - accuracy: 0.9212 - val_loss: 0.3392 - val_accuracy: 0.8011\n",
      "Epoch 26/35\n",
      "22800/22800 [==============================] - 214s 9ms/step - loss: 0.2106 - accuracy: 0.9204 - val_loss: 0.5968 - val_accuracy: 0.7442\n",
      "Epoch 27/35\n",
      "22800/22800 [==============================] - 216s 9ms/step - loss: 0.2002 - accuracy: 0.9245 - val_loss: 0.2737 - val_accuracy: 0.8916\n"
     ]
    }
   ],
   "source": [
    "stop_early = EarlyStopping(patience=8)\n",
    "history = model.fit(X_train, y_train, epochs=35, validation_split=0.04, callbacks=[stop_early])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "epochs = range(1, len(loss) + 1)\n",
    "\n",
    "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_sample = X_test[100:500]\n",
    "predictions = model.predict(test_sample)\n",
    "true_labels = y_test[100:500]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on the training data:\n",
      "23750/23750 [==============================] - 81s 3ms/step\n",
      "0.942105233669281\n",
      "\n",
      "Accuracy on the test data:\n",
      "1250/1250 [==============================] - 4s 4ms/step\n",
      "0.8967999815940857\n"
     ]
    }
   ],
   "source": [
    "    print('Accuracy on the training data:')\n",
    "    print(model.evaluate(X_train, y_train)[1])\n",
    "\n",
    "    print('\\nAccuracy on the test data:')\n",
    "    print(model.evaluate(X_test, y_test)[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Below the same model. More epochs and in early stopping added to save the higest acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on the training data:\n",
      "23750/23750 [==============================] - 50s 2ms/step\n",
      "0.9591578841209412\n",
      "\n",
      "Accuracy on the test data:\n",
      "1250/1250 [==============================] - 3s 2ms/step\n",
      "0.9079999923706055\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy on the training data:')\n",
    "print(model.evaluate(X_train, y_train)[1])\n",
    "\n",
    "print('\\nAccuracy on the test data:')\n",
    "print(model.evaluate(X_test, y_test)[1])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
